using Xunit;
using fastdee.PoolOps;

namespace fastdee.Tests.PoolOps
{
    /// <summary>
    /// Only <see cref="Merkles.Canonical(byte[])"/> is supported for now.
    /// </summary>
    public class MerklesTests
    {
        [Theory]
        [InlineData(new byte[] {
            0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,            0xff, 0x55, 0x03, 0x0a, 0x5e, 0x39, 0x06, 0x2f,
            0x50, 0x32, 0x53, 0x48, 0x2f, 0x04, 0x43, 0xd9,            0xdd, 0x5f, 0x08, 0xfa, 0xbe, 0x6d, 0x6d, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,            0x00, 0x1b, 0x16, 0x00, 0x00, 0x00, 0x00, 0x0f,
            0x2f, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2d,            0x44, 0x75, 0x74, 0x63, 0x68, 0x31, 0x2f, 0x00,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0xaf, 0x2f,            0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14,
            0x83, 0x05, 0xab, 0x30, 0x72, 0x7e, 0x88, 0xfc,            0xe8, 0x6a, 0x11, 0x4c, 0xad, 0x31, 0xd1, 0xcf,
            0x50, 0x6c, 0x6e, 0x99, 0x88, 0xac, 0x00, 0x00,            0x00, 0x00
        }, new byte[] {
            0x56, 0x36, 0xa9, 0xcf, 0x26, 0xbb, 0xdb, 0x51,            0x57, 0x58, 0xa5, 0x93, 0x61, 0xc2, 0x2f, 0xc5,
            0x1a, 0x33, 0x05, 0x19, 0x6b, 0x24, 0x45, 0x52,            0x33, 0xe2, 0x91, 0xf0, 0x57, 0x26, 0x18, 0x83,
        })]
        [InlineData(new byte[] {
            0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,            0xff, 0x55, 0x03, 0x1d, 0x5e, 0x39, 0x06, 0x2f,
            0x50, 0x32, 0x53, 0x48, 0x2f, 0x04, 0x17, 0xdd,            0xdd, 0x5f, 0x08, 0xfa, 0xbe, 0x6d, 0x6d, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,            0x00, 0x1b, 0x16, 0x07, 0x00, 0x00, 0x00, 0x0f,
            0x2f, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2d,            0x44, 0x75, 0x74, 0x63, 0x68, 0x31, 0x2f, 0x00,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0xaf, 0x2f,            0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14,
            0x83, 0x05, 0xab, 0x30, 0x72, 0x7e, 0x88, 0xfc,            0xe8, 0x6a, 0x11, 0x4c, 0xad, 0x31, 0xd1, 0xcf,
            0x50, 0x6c, 0x6e, 0x99, 0x88, 0xac, 0x00, 0x00,            0x00, 0x00
        }, new byte[] {
            0x34, 0xee, 0xe0, 0xa5, 0x69, 0x6a, 0x6c, 0x1d,            0xb7, 0xc2, 0x96, 0x49, 0x7f, 0xca, 0x4e, 0x36,
            0xa6, 0x20, 0x00, 0x21, 0x39, 0x74, 0x5e, 0xe3,            0x0c, 0x09, 0x1b, 0xb6, 0xb8, 0x85, 0x10, 0x80
        })]
        [InlineData(new byte[] {
            0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,            0xff, 0x55, 0x03, 0x2e, 0x5e, 0x39, 0x06, 0x2f,
            0x50, 0x32, 0x53, 0x48, 0x2f, 0x04, 0xde, 0xe1,            0xdd, 0x5f, 0x08, 0xfa, 0xbe, 0x6d, 0x6d, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,            0x00, 0xcd, 0xba, 0x03, 0x00, 0x00, 0x00, 0x0f,
            0x2f, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2d,            0x44, 0x75, 0x74, 0x63, 0x68, 0x33, 0x2f, 0x00,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0xaf, 0x2f,            0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14,
            0x83, 0x05, 0xab, 0x30, 0x72, 0x7e, 0x88, 0xfc,            0xe8, 0x6a, 0x11, 0x4c, 0xad, 0x31, 0xd1, 0xcf,
            0x50, 0x6c, 0x6e, 0x99, 0x88, 0xac, 0x00, 0x00,            0x00, 0x00
        }, new byte[] {
            0x26, 0xb7, 0xd8, 0x8e, 0x75, 0x6d, 0x1b, 0x1b,            0x98, 0x50, 0x1c, 0x22, 0x1e, 0xc1, 0xfe, 0x77,
            0xb0, 0x06, 0x47, 0x4a, 0x5b, 0x81, 0xb1, 0xf3,            0x63, 0x37, 0x82, 0xe8, 0x4d, 0x54, 0x46, 0x94
        })]
        public void CanonicalMatchesGolden(byte[] observedCoinbase, byte[] expectedRoot)
        {
            var calc = Merkles.Canonical(observedCoinbase);
            Assert.Equal(expectedRoot, calc.blob);
        }

        [Theory]
        [InlineData(
            new byte[] {
                0x9f, 0xac, 0x3e, 0x91, 0x51, 0x87, 0xdb, 0xcf,    0xe7, 0x11, 0x27, 0xe5, 0x64, 0x28, 0x27, 0x19,
                0x81, 0xb2, 0xcd, 0xad, 0x8d, 0x92, 0x51, 0xa2,    0xc9, 0x52, 0x67, 0xe7, 0x62, 0x3d, 0x99, 0xbb
            }, new byte[] {
                0x5e, 0xad, 0x2a, 0x1b, 0xbb, 0x7b, 0x65, 0xa6,    0xfe, 0xb4, 0x64, 0x4d, 0x34, 0xc0, 0x4c, 0xca,
                0x72, 0xfd, 0x08, 0xda, 0x84, 0x40, 0xe0, 0x82,    0x88, 0x9f, 0xa6, 0xbc, 0x85, 0x6f, 0x48, 0x2f
            }, new byte[] {
                0x21, 0x1d, 0xee, 0x5d, 0x4c, 0xf8, 0x77, 0xe6,    0x18, 0x2a, 0x33, 0x34, 0xee, 0xa7, 0xd7, 0xa2,
                0xd6, 0x15, 0x8b, 0xac, 0x05, 0xae, 0xe7, 0x21,    0xc6, 0x49, 0x34, 0xaa, 0xa6, 0x5c, 0x8e, 0x19
            })]
        public void BlendingMatchesGolden(byte[] root, byte[] merkle, byte[] expected)
        {
            var calc = Merkles.BlendMerkle(root, merkle);
            Assert.Equal(calc.blob, expected);
        }
    }
}
