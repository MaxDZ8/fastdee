using Xunit;
using fastdee;

namespace fastdee.Tests
{
    public class SupportedAlgosTests
    {
        [Theory]
        [InlineData("keccak")]
        public void SupportsMerkleGeneration(string algo)
        {
            var gen = Program.ChooseMerkleGenerator(algo);
            Assert.NotNull(gen);
        }

        [Theory]
        [InlineData(
            "keccak",
            new byte[] {
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x4e, 0x03, 0x95, 0x96, 0x00, 0x04, 0x11,
                0x98, 0xdf, 0x5f, 0x08, 0xfa, 0xbe, 0x6d, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x08, 0x00, 0x22, 0xb3, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x2f, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
                0x2d, 0x44, 0x75, 0x74, 0x63, 0x68, 0x32, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x6a, 0x24, 0xaa, 0x21, 0xa9, 0xed, 0x96, 0x2d, 0xae, 0x8f,
                0x68, 0x16, 0x3b, 0x65, 0x09, 0x17, 0xdf, 0xca, 0x26, 0x50, 0x6b, 0x8a, 0xc8, 0x68, 0xd8, 0x53,
                0xad, 0x11, 0x5f, 0xa2, 0xc9, 0x0f, 0xf2, 0xb2, 0x05, 0xa5, 0x6a, 0xcc, 0x5f, 0xcf, 0x17, 0xa8,
                0x04, 0x00, 0x00, 0x00, 0x16, 0x00, 0x14, 0x92, 0x3a, 0xe3, 0xdf, 0x6b, 0x46, 0xc6, 0x69, 0xe3,
                0x75, 0xf6, 0x38, 0x93, 0x39, 0xad, 0xce, 0x9d, 0xb0, 0xdf, 0x6e, 0x00, 0x00, 0x00, 0x00
            },
            new byte[] {
                0xa8, 0x4f, 0x10, 0xaa, 0xc6, 0x63, 0x8b, 0xcb, 0x92, 0xac, 0x9e, 0x0a, 0x72, 0xcb, 0xc6, 0x39,
                0x64, 0xde, 0x8b, 0xab, 0xef, 0xfa, 0xd8, 0xf8, 0xe8, 0xd3, 0x07, 0x67, 0x1d, 0xcb, 0x12, 0x49
            } // expected merkle out
        )]
        public void CorrectMerkleGeneration(string algo, byte[] coinbase, byte[] expected)
        {
            var gen = Program.ChooseMerkleGenerator(algo);
            var merkle = gen(coinbase);
            Assert.Equal(expected, merkle.blob);
        }

        [Theory]
        [InlineData("keccak", 1.0, 256.0, 1.0)]
        public void KnowsDifficultyMultipliers(string algo, double stratum, double one, double share)
        {
            var gen = Program.ChooseDifficulties(algo);
            Assert.NotNull(gen);
            Assert.Equal(stratum, gen.Stratum);
            Assert.Equal(one, gen.One);
            Assert.Equal(share, gen.Share);
        }

        [Theory]
        [InlineData("keccak", 256.0, 1.0)]
        public void CanOverrideStratumMultiplier(string algo, double one, double share)
        {
            var gen = Program.ChooseDifficulties(algo, 456.789);
            Assert.NotNull(gen);
            Assert.Equal(456.789, gen.Stratum);
            Assert.Equal(one, gen.One);
            Assert.Equal(share, gen.Share);
        }
    }
}
